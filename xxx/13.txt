https://tokmakov.msk.ru/blog/item/570  
Панель управления, обрезка изображения и валидация данных
ИЗОБРАЖЕНИЯ: загрузка, удаление, обрезка. АРХИ: хелпер по изображениям

#php artisan storage:linkу
в паблике появляется линк  /public/storage/ =>  \storage\app\public\
   public function store(Request $request) {
    
        $this->validate($request, [ 'parent_id' => 'integer',....  ]);
        
        /* Проверка пройдена, создаем категорию */
        $file = $request->file('image');
        if ($file) { // был загружен файл изображения
            $path = $file->store('catalog/category/source', 'public');       <<<<<<< загрузка >>>>>>>
            $base = basename($path);
        }
        $data = $request->all();
        $data['image'] = $base ?? null;  // вернутый выше filename цепляем к data->image
        $category = Category::create($data);
    }

    ...
     public function update(Request $request, Category $category) {
         ....
        if ($request->remove) { // если надо удалить изображение
            $old = $category->image;
            if ($old) {
                Storage::disk('public')->delete('catalog/category/source/' . $old);   <<<<<<< удаление >>>>>>>
            }
        }
        $file = $request->file('image');
        if ($file) { // был загружен файл изображения
            $path = $file->store('catalog/category/source', 'public');               <<<<<<< загрузка >>>>>>>
            $base = basename($path);
            // удаляем старый файл изображения
            $old = $category->image;
            if ($old) {
                Storage::disk('public')->delete('catalog/category/source/' . $old);   <<<<<<< удаление >>>>>>>
            }
        }
        $data = $request->all();
        $data['image'] = $base ?? null;
        $category->update($data);
        ...
     }

     ==============Обрезка изображения =====================
     нужен доп пакет  intervention/image  (создает обрезки 600x300, 300x150)
     #composer require intervention/image
     config/app.php
     return [
    ...
        'providers' => [
        ...
            Intervention\Image\ImageServiceProvider::class,
        ],
        
        'aliases' => [
            ...
            'Image' => Intervention\Image\Facades\Image::class,
        ]
    ...
    ]
уууу.  создаем первый хелпер (в коробке папки app/Helpers не было)

class ImageSaver {
    ...
    public function upload($request, $item, $dir) {
        $name = $item->image ?? null;
        if ($item && $request->remove) { // если надо удалить изображение
            $this->remove($item, $dir);
            $name = null;
        }
        $source = $request->file('image');
        if ($source) { // если было загружено изображение
            // перед загрузкой нового изображения удаляем старое
            if ($item && $item->image) {
                $this->remove($item, $dir);
            }
            $ext = $source->extension();
            // сохраняем загруженное изображение без всяких изменений
            $path = $source->store('catalog/'.$dir.'/source', 'public');
            $path = Storage::disk('public')->path($path); // абсолютный путь
            $name = basename($path); // имя файла
            // создаем уменьшенное изображение 600x300px, качество 100%
            $dst = 'catalog/'.$dir.'/image/';
            $this->resize($path, $dst, 600, 300, $ext);
            // создаем уменьшенное изображение 300x150px, качество 100%
            $dst = 'catalog/'.$dir.'/thumb/';
            $this->resize($path, $dst, 300, 150, $ext);
        }
        return $name;
    }
    public function resize($src, $dst, $width, $height, $ext) {
               // создаем уменьшенное изображение width x height, качество 100%
        $image = Image::make($src)
            ->heighten($height)
            ->resizeCanvas($width, $height, 'center', false, 'eeeeee')
            ->encode($ext, 100);
        // сохраняем это изображение под тем же именем, что исходное
        $name = basename($src);
        Storage::disk('public')->put($dst . $name, $image);
        $image->destroy();
    }

    public function remove( $item, $dir) {
       $old = $item->image;
        if ($old) {
            Storage::disk('public')->delete('catalog/'.$dir.'/source/' . $old);
            Storage::disk('public')->delete('catalog/'.$dir.'/image/' . $old);
            Storage::disk('public')->delete('catalog/'.$dir.'/thumb/' . $old);
        }       
    }
    
}

применяем єтот хелпер в категори_контроллер

================ ПОЯВИЛОСЬ НОВОЕ =====================
    private $imageSaver;

    public function __construct(ImageSaver $imageSaver) {
        $this->imageSaver = $imageSaver;
    }

--------------------------------------

 public function store(Request $request) {
     ....
   <<< =================  БЫЛО ====================
      // проверка пройдена, сохраняем категорию
        $category = Category::create($request->all());

    >>>  =============== СТАЛО ===================
        $data = $request->all();
        $data['image'] = $this->imageSaver->upload($request, null, 'category');
        $category = Category::create($data);   
 }

аналогично 
public function update(Request $request, Category $category) {
   ...
   <<< =================  БЫЛО ====================
   // проверка пройдена, обновляем категорию
       $category->update($request->all());

   >>>  =============== СТАЛО ===================
    $data = $request->all();
    $data['image'] = $this->imageSaver->upload($request, null, 'category');
    $category->update($data);       
}

 public function destroy(Category $category) {
     ....
   <<< =================  БЫЛО ====================

        $category->delete();

   >>>  =============== СТАЛО ===================
        $this->imageSaver->remove($category, 'category');
        $category->delete();
        ...
 }
 ---------------  изменяем код блейда (views/admin/category/show.blade.php)

<<< ========================= БЫЛО =====================

       <div class="col-md-6">
            <img src="https://via.placeholder.com/600x200" alt="" class="img-fluid">
        </div>

>>> =================  СТАЛО =======================
    <div class="col-md-6">
    @php
        if ($category->image) {

            $url = Storage::disk('public')->url('catalog/category/image/'.$category->image); <<<< ожидания >>>>
                // код выше  $url = Storage::disk('public')->url('  возвращает localhost
                // НЕ БАГ А ФИЧА ))))  потому тупо прописываем  http://127.0.0.1:8000/
            $url = "http://127.0.0.1:8000/storage/catalog/category/image/".$category->image;  <<<< реальность >>>>

            } else {

                ///////////////// ТА ЖЕ ХРЕНЬ. ФИЧА.
                // $url = url('storage/catalog/category/image/default.jpg');                <<<< ожидания >>>>

                $url = Storage::disk('public')->url('catalog/category/image/default.jpg');  <<<< реальность >>>>

            }
    @endphp
        <img src="{{ $url }}" alt="" class="img-fluid">
    </div>        

============================== РЕФАКТОРИНГ ВАЛИДАЦИИ ===================================
валидация отдельн классом (внекл чтение:  https://laravel.demiart.ru/laravel-validation-controllers-form-requests-and-rules/)

вместо отдельных 
...
         // проверяем данные формы создания категории
        $this->validate($request, [
            'parent_id' => 'integer',
            'name' => 'required|max:100',
            'slug' => 'required|max:100|unique:categories,slug|alpha_dash',
            'image' => 'mimes:jpeg,jpg,png|max:5000'
        ]);
....  создадим общее        

#php artisan make:request CategoryCatalogRequest
родилось:
namespace App\Http\Requests;
...
    class CategoryCatalogRequest extends FormRequest
там в общ два метода 
   public function authorize()
    {
        return falese; // or true  авторизированній может реквестить или нет?
    }

    public function rules()
    {
        switch ($this->method()) {
            case 'POST':   // приведено для примера
                return [
                    'parent_id' => 'integer',
                    'name' => 'required|max:100',
                    'slug' => 'required|max:100|unique:categories,slug|regex:~^[-_a-z0-9]+$~i',
                    'image' => 'mimes:jpeg,jpg,png|max:5000'
                ];
            case 'PUT':
            case 'PATCH':
                
                // получаем объект модели категории из маршрута: admin/category/{category}
                $model = $this->route('category');
                // из объекта модели получаем уникальный идентификатор для валидации
                $id = $model->id;
                
                return [
                // ...какие-то правила для пут, патч
                ];
        }
    }

    ----------- вписка валидатора в категори_контроллер

use App\Http\Requests\CategoryCatalogRequest;  ++++++++++++++++++++++

<<<<  БЫЛО
public function store(Request $request)
  
        $this->validate($request, [
            'parent_id' => 'integer',
            'name' => 'required|max:100',
            'slug' => 'required|max:100|unique:categories,slug|alpha_dash',
            'image' => 'mimes:jpeg,jpg,png|max:5000'
        ]);

....    
}

>>>>  СТАЛО   ($this->validate  убрали, в параметрах CategoryCatalogRequest )
  public function store(CategoryCatalogRequest $request) {
  
        $data = $request->all();
        $data['image'] = $this->imageSaver->upload($request, null, 'category');
        $category = Category::create($data);
        return redirect()
            ->route('admin.category.show', ['category' => $category->id])
            ->with('success', 'Новая категория успешно создана');
    }
